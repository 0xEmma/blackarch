#!/bin/bash
# Acts sort of like pacman.
# This script may called from any location but the script itself must
#  live in '$projectroot/scripts'.

usage() {
	cat >&2 <<-USAGE
	blackman [-h|--help] action
	USAGE
}

error() {
	echo >&2 "blackman: $@ (use -h for help)"
}

cd "$(dirname "$0")/.."

targets=()
action=none

for arg ; do
	if [[ $arg == -* ]] ; then
		case $arg in
			-h|--help)
				usage
				exit
				;;
			-S)
				action=sync
				;;
			-Ss)
				action=search
				;;
			-Si)
				action=info
				;;
			-Sl)
				action=list
				;;
			-Syu|-Su)
				action=upgrade
				;;
			*)
				error "unsupported: $arg"
				exit 1
				;;
		esac
	else
		targets+=($arg)
	fi
done

if [[ $action == none ]] ; then
	error 'no action specified'
	exit 1
fi

# Make sure the packages exist.
for pack in "${targets[@]}" ; do
	if [[ ! -d packages/$pack ]] ; then
		error "could not find $pack"
		exit 2
	fi
done

# Recursively prints a package's BlackArch dependencies.
# Offical repo dependencies are not printed.
# Output is as such:
#  <depth> <package>
# The output is not guaranteed to be sorted by depth
# TODO: clean this up a bit.
n=0
get_blackarch_deps() {
	local pack=$1
	(( n++ ))

	echo $1 >> ~/alog
	echo N $n >> ~/alog

	# Don't do anything if maximum depth reached or no package passed.
	if [[ $n == 10 || $# == 0 ]] ; then
		return
	fi

	(
	if source packages/$pack/PKGBUILD &> /dev/null ; then
		# Don't print the first package.
		if [[ $n != 1 ]] ; then
			echo $n $pack
		fi
	else
		# Don't do anything if the package couldn't be sourced.
		return
	fi

	for dep in "${depends[@]}" ; do
		get_blackarch_deps "$(sed 's/\(>\|<\|=\).*//' <<< $dep)"
	done
	) | sort -k2 -u
}

do_sync() { (
	local pack=$1
	cd packages/$pack
	makepkg -fs
	# TODO: improve this sort.
	local file=$(find . -maxdepth 1 -name '*.pkg.tar.xz' | sort -n | head -n1)
	# xargs doesn't work here.
	sudo pacman "${@:2}" -U "$file"
) }

is_installed() {
	pacman -Si "$pack" &> /dev/null
}

case $action in
	sync)
		# Check for targets.
		if [[ ${#targets[@]} == 0 ]] ; then
			error 'no targets specified'
			exit 3
		fi

		for pack in "${targets[@]}" ; do (
			while read dep <&3 ; do
				do_sync $dep --asdeps 
			done 3< <(get_blackarch_deps "$pack" |
			         sort -n |
			         cut -d' ' -f2)
			do_sync "$pack"
		) done
		;;
	search)
		echo >&2 'Not supported yet.'
		;;
	info)
		echo >&2 'Not supported yet.'
		;;
	list)
		echo >&2 'Not supported yet.'
		;;
	upgrade)
		echo >&2 'Not supported yet.'
		;;
	*)
		error 'action error'
		exit 3
		;;
esac
