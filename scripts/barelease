#!/bin/bash
# Please excuse the multiple connections.
# This does not delete old package files. Absolutely do not try to do that
# manually.

unset DISPLAY

# override with -s
site=blackarch.org
# override with -d
sitedir=/nginx/var/www
# overrise with -r
repo=blackarch
# override with -u
user=$USER

# overrise with -f
force=false
# override with -a
always_push=false

we_started_gpg=false
we_started_ssh=false

error_handler() {
	err 'something bad happened.'
	exit 1
}

err() {
	echo >&2 "ERROR: $*"
}

usage() {
	cat <<EOF
usage: barelease <package> [-f|-a|-k <key>]

-f          Remove /tmp/blackarch.lck before doing anything.
-a          Always push, even if repo-add fails. This can be dangerous. Please talk
            to paraxor if you do not understand why.
-k <key>    Specify the gpg key to use for signing.
-r <repo>   Specify an alternative repo. (Default: blackarch) 
-u <user>   Specify the user to use on the remote host.
-d <dir>    Specify the location of the repo on the site (Default: /nginx/var/www)
-s <site>   Specify the site to use (Default: blackarch.org)
EOF
}

cleanup() {
	echo 'cleaning up...'

	# Kill gpg-agent.
	$we_started_gpg && kill "$(cut -d: -f2 <<< "$GPG_AGENT_INFO")" 2> /dev/null >&2

	# Kill ssh-agent.
	$we_started_ssh && kill "$SSH_AGENT_PID" 2> /dev/null >&2

	# Clean up temporary directory.
	rm -rf "$tmp"
}

check_args() {
	if (( $# == 0 )) ; then
		usage
		exit 1
	fi
}

parse_args() {
	package=$1
	shift

	while (( $# != 0 )) ; do
		case "$1" in
			-f)
				force=true
				;;
			-a)
				always_push=true
				;;
			-k)
				key=$2
				shift
				;;
			-r)
				repo=$2
				shift
				;;
			-u)
				user=$2
				shift
				;;
			-s)
				site=$2
				shift
				;;
			-d)
				sitedir=$2
				shift
				;;
		esac
		shift
	done
}

detect_key() {
	if [[ -z "$key" ]] ; then
		key=$(gpg -K | grep -B1 'BlackArch Developer' | head -n1 | awk '{ print $2 }' | cut -d/ -f2)
		if [[ -z "$key" ]] ; then
			err 'failed to auto-detect a packager key.'
			exit 1
		fi
	fi
	
	# TODO: remove this once the transition period is over.
	if [[ "$key" == 4EB7BB3C ]] ; then
		key=EA87E4E3
	fi
}

check_key() {
	if ! pacman-key -l | grep -q "$key" ; then
		err "$key is not in the keyring."
		exit 1
	fi

	echo "using key: $key"
}

check_package() {
	if [[ ! -r "$package" ]] ; then
		err "unable to read package file: '$package'."
		exit 1
	fi

	if [[ "$package" != *.pkg.tar.xz ]] ; then
		err "'$package' must have a .pkg.tar.xz extension."
		exit 1
	fi
}

detect_arch() {
	if [[ $package == *-any.pkg.tar.xz ]] ; then
		arch=(i686 x86_64)
	elif [[ $package == *-x86_64.pkg.tar.xz ]] ; then
		arch=(x86_64)
	elif [[ $package == *-i686.pkg.tar.xz ]] ; then
		arch=(i686)
	else
		echo "unknown arch for '$package'"
		exit 1
	fi
}

start_gpg_agent() {
	[[ -z "$GPG_TTY" ]] && export GPG_TTY=$(tty)
	if [[ -z "$GPG_AGENT_INFO" ]] ; then
		echo 'starting gpg-agent...'
		eval $(gpg-agent --daemon --default-cache-ttl 10000)
		we_started_gpg=true
	else
		echo 'gpg-agent already started.'
	fi
	gpg --default-key "$key" -s > /dev/null < /dev/null
}

start_ssh_agent() {
	if [[ -z "$SSH_AGENT_PID" ]] ; then
		echo 'starting ssh-agent...'
		eval $(ssh-agent)
		ssh-add
		we_started_ssh=true
	else
		echo 'ssh-agent already started.'
	fi
}

lock() {
	echo "obtaining lock..."
	ssh -l "$user" "$site" "$(declare -f remote_lock); remote_lock"
}

# This runs on the remote host.
remote_lock() {
	if ! mkdir -m000 /tmp/blackarch.lck ; then
		echo >&2 'unable to obtain lock.'
		exit 1
	fi
}

unlock() {
	echo "releasing lock..."
	ssh -l "$user" "$site" "$(declare -f remote_unlock); remote_unlock"
}

# This runs on the remote host.
remote_unlock() {
	rmdir /tmp/blackarch.lck > /dev/null 2>&1 || true
}

do_release() {
	tmp=$(mktemp -d /tmp/barelease.XXXXXXXX)

	cp "$package" "$tmp"
	cd "$tmp"

	if $force ; then
		echo "warning: forcing lock release..."
		unlock
	fi

	lock

	for a in "${arch[@]}" ; do
		echo
		echo "ARCH: $a"

		echo "pulling..."
		rsync -z -e "ssh -l $user" "$site:$sitedir/blackarch/$repo/os/$a"/{blackarch.db.tar.gz,blackarch.files.tar.gz} .

		echo "signing and adding to database..."
		gpg --no-tty --default-key "$key" --yes -b "$package" > /dev/null 2>&1
		if ! repo-add --nocolor -n -q blackarch.db.tar.gz "$package" && ! $always_push ; then
			err "something bad happened. not pushing for $arch."
			continue
		fi

		echo 'adding to files database...'
		repo-add --nocolor -n -q -f blackarch.files.tar.gz "$package" || true

		gpg --no-tty --default-key "$key" --yes -b blackarch.files.tar.gz > /dev/null 2>&1
		gpg --no-tty --default-key "$key" --yes -b blackarch.db.tar.gz > /dev/null 2>&1

		echo "pushing..."
		rsync -z --ignore-existing --chmod 644 -e "ssh -l $user" ./"$package"{,.sig} blackarch.db.tar.gz{,.sig} "$site:$sitedir/blackarch/$repo/os/$a" || true
	done

	unlock
}

main() {
	trap error_handler ERR

	check_args "$@"
	parse_args "$@"

	check_package

	detect_key
	check_key

	trap cleanup EXIT

	detect_arch
	start_gpg_agent
	start_ssh_agent

	do_release
}

main "$@"
