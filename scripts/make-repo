#!/bin/bash
# usage: make-repo [package_directory] [build_directory]
# May be run from anywhere. Must live in '$projectroot/scripts'.

# Default settings.
arch=x86_64
jobs=8
use_whitelist=false

# The sorts are sensitive.
export LC_ALL=POSIX

msg() {
	echo >&2 "$*"
}

msg2() {
	echo >&2 "-----> $*"
}

warn() {
	echo >&2 "error> $*"
}

cache_rights() {
	msg 'attempting to cache rights...'
	sudo -v || msg 'sudo failed. continuing build anyways.'
}

while [[ -n "$1" ]] ; do
	case "$1" in
		--content-filter)
			content_filter=$2
			shift
			;;
		--whitelist)
			use_whitelist=true
			whitelist=$2
			shift
			;;
		--name-filter)
			name_filter=$2
			shift
			;;
		--arch)
			arch=$2
			shift
			;;
		-j|--jobs)
			jobs=$2
			shift
			;;
		*)
			msg "'$arg' not recognized."
			exit 1
			;;
	esac
	shift
done

cache_rights

# Don't use the X passphrase prompt.
#unset DISPLAY

basedir=$(realpath "$(dirname "$0")")
cd "$basedir/.."

# PKGBUILDs and tracked source come from here.
pkgdir=$(realpath packages)

# PKGBUILDs and tracked source are copied here.
builddir=$(realpath build)
mkdir -p "$builddir"

# Built package go here.
repodir=$(realpath repo/$(uname -m))
mkdir -p "$repodir"

cd "$pkgdir"

msg 'generating depth list...'
while read item ; do
	cache_rights

	# Extract depth and name from item.
	read depth pack <<< "$item"
	msg "-item> $pack $depth"

	# Handle first package.
	if [[ -z "$last_depth" ]] ; then
		last_depth=$depth
	fi

	msg2 "$pack copying..."

	# packages/*/<package> -> build/<package>
	cp -vfr "$pack" "$builddir"

	msg2 "$pack cleaning..."

	# Better than nothing cleaning.
	# It is preferable to run 'git clean -dXf packages' or work with a fresh
	# clone.
	cd "$builddir/$pack"
	rm -vrf */
	rm -vf *.{xz,gz,zip,bzip2,gunzip2,tgz,tar}

	#"$base/make-package" . $arch /tmp/make-repo$RANDOM.lck

	if [[ $depth != $last_depth ]] ; then
		msg2 "$pack building..."

		printf "$builddir/%s\\n" "${queue[@]}" |
		  parallel -n1 -j$jobs "$base/make-package" . $arch /tmp/make-repo$RANDOM.lck

		queue=()
	fi

	# Exit on last item.
	if [[ $depth == 0 ]] ; then
		break
	fi

	queue+=("$pack")

	# Log errors.
	ret=$?
	if [[ $ret != 0 ]] ; then
		warn "'$pack' failed with error code $ret"
		continue
	fi

	# Install if dependency.
	if [[ $depth != 1 ]] ; then
		sudo pacman --asdeps --noconfirm -U *.pkg.tar.xz ||
		  warn "'$pack' failed to install"
	fi

	msg2 'moving to repo...'
	# Move package into the repo.
	mv *.pkg.tar.xz "$repodir"
done < <(
if $use_whitelist ; then
	grep -l "$content_filter" */PKGBUILD | cut -d/ -f1 |
			grep "$name_filter" | xargs "$basedir/depth-list";
			echo '0 end'
else
	echo "${whitelist//,/ }" |
	  xargs "$basedir/depth-list"
fi
)

# vim: set ft=zsh:
