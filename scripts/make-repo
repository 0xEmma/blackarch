#!/bin/bash
# usage: make-repo [package_directory] [build_directory]
# May be run from anywhere. Must live in '$projectroot/scripts'.

# Default settings.
sign=true
ruby_only=false

# The sorts are sensitive.
export LC_ALL=POSIX

msg() {
	echo >&2 "$*"
}

msg2() {
	echo >&2 "-----> $*"
}

warn() {
	echo >&2 "error> $*"
}

cache_rights() {
	msg 'attempting to cache rights...'
	sudo -v || msg 'sudo failed. continuing build anyways.'
}

for arg ; do
	case "$arg" in
		--ruby)
			ruby_only=true
			;;
		--nosign|--test)
			sign=false
			;;
		*)
			msg "'$arg' not recognized."
			exit 1
			;;
	esac
done

cache_rights

# Don't use the X passphrase prompt.
#unset DISPLAY

basedir=$(realpath "$(dirname "$0")")
cd "$basedir/.."

# PKGBUILDs and tracked source come from here.
pkgdir=$(realpath packages)

# PKGBUILDs and tracked source are copied here.
builddir=$(realpath build)
mkdir -p "$builddir"

# Built package go here.
repodir=$(realpath repo)
mkdir -p "$repodir"

cd "$pkgdir"

msg 'generating depth list...'
if $ruby_only ; then
	grep -l ruby */PKGBUILD | cut -d/ -f1 | xargs "$basedir/depth-list"
else
	"$basedir/depth-list"
fi |
while read item ; do (
	cache_rights

	read depth pack <<< "$item"
	msg "depth> $depth"
	msg "-name> $pack"

	msg2 'copying...'

	# packages/*/<package> -> build/<package>
	cp -vfr "$pack" "$builddir"
	cd "$builddir/$pack"

	msg2 'cleaning...'

	# Better than nothing cleaning.
	# It is preferable to run 'git clean -dXf packages' or work with a fresh
	# clone.
	rm -vrf */
	rm -vf *.{xz,gz,zip,bzip2,gunzip2,tgz,tar}

	msg2 'building...'

	# Build.
	makepkg -s --nocheck --noconfirm 2>&1

	# Log errors.
	ret=$?
	if [[ $ret != 0 ]] ; then
		warn "'$pack' failed with error code $ret"
		continue
	fi

	# Install if dependency.
	if [[ $depth != 1 ]] ; then
		sudo pacman --asdeps --noconfirm -U *.pkg.tar.xz ||
		  warn "'$pack' failed to install"
	fi

	msg2 'moving to repo...'
	# Move package into the repo.
	mv *.pkg.tar.xz "$repodir"
) done

# Put together a database.
cd "$repodir"

if $sign ; then
	msg 'starting gpg agent...'

	# Kill gpg-agent on exit.
	trap_exit() {
		kill "$(cut -d: -f2 <<< "$GPG_AGENT_INFO")"
	}
	trap trap_exit EXIT

	# Start gpg-agent.
	[[ -z "$GPG_TTY" ]] && export GPG_TTY=$(tty)
	[[ -z "$GPG_AGENT_INFO" ]] && eval $(gpg-agent --daemon --default-cache-ttl 10000)

	msg 'signing packages...'
	for pack in *.pkg.tar.xz ; do
		gpg -b "$pack"
	done
fi

msg 'creating database...'
repo-add blackarch.db.tar.gz *.pkg.tar.xz 2>&1

# vim: set ft=zsh:
