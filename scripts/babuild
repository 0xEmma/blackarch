#!/bin/bash

origdir=$PWD
basedir=${BASH_SOURCE[0]%/*}
outdir=$(realpath "$basedir/../babuild")

export LC_ALL=POSIX

err() {
	echo >&2 "ERROR: $*"
}

usage() {
	cat <<EOF
usage: babuild [-g <package in git>] [-a <arch>] [-o <outdir>] [-i <packager>]'

  -g <package in git>    Change the CWD to a package's directory in git before building.
  -a <arch>              Whitelist architectures to build for. You may use this
                         flag multiple times. This does not apply to 'any' packages.
  -o <outdir>            Specify an out directory to copy built packages to.
  -i <packager>          Specify the packager for makepkg. You can set the
                         PACKAGER environmental variable instead.
EOF
}

cleanup() {
	rm -rf "$tmp"
}

check_for_root() {
	if (( $EUID != 0 )) ; then
		err "you must have root privledges."
		exit 1
	fi
}

parse_args() {
	while [[ -n "$1" ]] ; do
		case "$1" in
			-a|--arch)
				arch+=("$2")
				shift
				;;
			-g|--git)
				git_package="$2"
				shift
				;;
			-o|--out)
				outdir=$2
				shift
				;;
			-p|--packager)
				export PACKAGER=$2
				shift
				;;
			*)
				pass_through=("$2")
				shift
				;;
		esac
		shift
	done

	if (( ${#arch[@]} == 0 )) ; then
		arch=(i686 x86_64)
	fi

	if [[ -n "$git_package" ]] ; then
		cd "$basedir/../packages/$git_package"
	fi
}

copy_files() {
	# The temporary directory and its contents must be world-readable and
	# world-writeable.
	tmp=/tmp/babuild.$RANDOM$RANDOM
	mkdir "$tmp"
	(
	. ./PKGBUILD
	copy=(PKGBUILD "$install" "$changelog")
	for s in "${source[@]}" ; do
		if [[ -r "$s" ]] ; then
			copy+=("$s")
		fi
	done
	cp "${copy[@]}" "$tmp" 2> /dev/null
	)
	chmod -R a+wrX "$tmp"
}

do_build() {
	cd "$tmp"

	if grep -q '^arch.*any' PKGBUILD ; then
		echo "NOTE: package's architecture is set to 'any'"
		blackarch32-i686-build "${pass_through[@]}"
	else
		for arch in "${arch[@]}" ; do
			case "$arch" in
				i686)
					if grep -q '^arch.*i686' PKGBUILD ; then
						blackarch32-i686-build "${pass_through[@]}"
					else
						echo "NOTE: package is not compatible with i686"
					fi
					;;
				x86_64)
					if grep -q '^arch.*x86_64' PKGBUILD ; then
						blackarch64-x86_64-build "${pass_through[@]}"
					else
						echo "NOTE: package is not compatible with x86_64"
					fi
					;;
			esac
		done
	fi
}

copy_build() {
	echo "copying built packages to '$outdir'..."
	mkdir -p "$outdir"
	cp *.pkg.tar.xz "$outdir"
}

main() {
	check_for_root
	parse_args "$@"

	trap cleanup EXIT

	copy_files
	do_build
	copy_build
}

main "$@"
