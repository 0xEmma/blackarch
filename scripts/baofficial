#!/bin/bash
# Download official package files.

# override with -n
do_release=true
# override with -m
mirror=http://mirror.archlinux.no
# override with -s
signatures=true
# override with -o
out_dir=.

base=${BASH_SOURCE[0]%/*}

err() {
	echo >&2 "baofficial: $*"
}

die() {
	err "FATAL: $*"
	exit 1
}

pkg_info() {
	local pkg=$1
	local item=$2

	pacman "--config=$conffile" -Si "$pkg" |
	  awk -F: "/^$item/{ gsub(/^ /, \"\", \$2); print \$2 }" |
	  head -n1
}

_sudo() {
	if [[ $EUID != 0 ]] ; then
		sudo "$@"
	else
		"$@"
	fi
}

parse_args() {
	while getopts nm:so: flag ; do
		case "$flag" in
			n) do_release=false ;;
			m) mirror=$OPTARG ;;
			s) signatures=false ;;
			o) out_dir=$OPTARG ;;
			*) die "invalid option: $OPTARG" ;;
		esac
	done

	shift $(( $OPTIND - 1 ))

	pkgname=$1
}

check_args() {
	if [[ -z "$pkgname" ]] ; then
		die 'specify a package name'
	fi
}

cleanup() {
	_sudo rm -rf "$tmp"
}
trap cleanup EXIT

handle_arch() {
	local arch=$1
	local pacman_dir=$tmp/pacman/$arch
	local dbdir=$pacman_dir/db
	local logfile=$pacman_dir/pacman.log
	local conffile=$pacman_dir/pacman.conf

	mkdir -p "$dbdir"
	mkdir -p "${logfile%/*}"
	mkdir -p "${conffile%/*}"

	cat > "$conffile" <<EOF
[options]
Architecture = $arch
SigLevel    = Never
CacheDir    = $tmp/$arch
DBPath      = $dbdir
LogFile     = $logfile

[core]
Server = $mirror/\$repo/os/$arch

[extra]
Server = $mirror/\$repo/os/$arch

[community]
Server = $mirror/\$repo/os/$arch
EOF

	err "syncing $arch package database..."

	# Sync db.
	_sudo pacman "--config=$conffile" -Sy > /dev/null

	# Check existence.
	if ! pacman -Si "$pkgname" &> /dev/null ; then
		die "$pkgname does not exist in the official repos"
	fi

	# Get info.
	pkgver=$(pkg_info $pkgname Version)
	pkg_arch=$(pkg_info $pkgname Architecture)
	repo=$(pkg_info $pkgname Repository)

	# Download.
	(
	cd "$tmp"
	err 'downloading files...'
	curl -sO "$mirror/$repo/os/$arch/$pkgname-$pkgver-$pkg_arch.pkg.tar.xz"
	curl -sO "$mirror/$repo/os/$arch/$pkgname-$pkgver-$pkg_arch.pkg.tar.xz.sig"
	)
}

handle_finale() {
	if $do_release ; then
		barelease -o "$tmp"/*.pkg.tar.xz
		echo barelease -o "$tmp"/*.pkg.tar.xz
	else
		cp -i "$tmp"/*.pkg.tar.xz "$out_dir"
		if $signatures ; then
			cp -i "$tmp"/*.pkg.tar.xz.sig "$out_dir"
		fi
	fi
}

tmp=$(mktemp -d /tmp/baofficial.XXXXXXXX)

main() {
	parse_args "$@"
	check_args

	handle_arch i686
	handle_arch x86_64

	handle_finale
}

main "$@"
